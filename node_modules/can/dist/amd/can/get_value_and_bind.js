/*!
 * CanJS - 2.3.0-pre.13
 * http://canjs.com/
 * Copyright (c) 2015 Bitovi
 * Wed, 23 Sep 2015 23:13:47 GMT
 * Licensed MIT
 */

/*can@2.3.0-pre.13#compute/get_value_and_bind*/
define(['can/util/library'], function (can) {
    function getValueAndBind(func, context, oldObservedInfo, onchanged) {
        var newObservedInfo = getValueAndObserved(func, context), newObserveSet = newObservedInfo.observed, oldObserved = oldObservedInfo.observed;
        if (newObservedInfo.names !== oldObservedInfo.names) {
            bindNewSet(oldObserved, newObserveSet, onchanged);
            unbindOldSet(oldObserved, onchanged);
        }
        can.batch.afterPreviousEvents(function () {
            newObservedInfo.ready = true;
        });
        return newObservedInfo;
    }
    var getValueAndObserved = function (func, self) {
        observedInfoStack.push({
            names: '',
            observed: {}
        });
        var value = func.call(self);
        var stackItem = observedInfoStack.pop();
        stackItem.value = value;
        return stackItem;
    };
    var bindNewSet = function (oldObserved, newObserveSet, onchanged) {
        for (var name in newObserveSet) {
            bindOrPreventUnbinding(oldObserved, newObserveSet, name, onchanged);
        }
    };
    var bindOrPreventUnbinding = function (oldObserved, newObserveSet, name, onchanged) {
        if (oldObserved[name]) {
            delete oldObserved[name];
        } else {
            var obEv = newObserveSet[name];
            obEv.obj.bind(obEv.event, onchanged);
        }
    };
    var unbindOldSet = function (oldObserved, onchanged) {
        for (var name in oldObserved) {
            var obEv = oldObserved[name];
            obEv.obj.unbind(obEv.event, onchanged);
        }
    };
    var observedInfoStack = [];
    can.__observe = can.__reading = function (obj, event) {
        if (observedInfoStack.length) {
            var name = obj._cid + '|' + event, top = observedInfoStack[observedInfoStack.length - 1];
            if (!top.observed[name]) {
                top.names += name;
                top.observed[name] = {
                    obj: obj,
                    event: event + ''
                };
            }
        }
    };
    can.__isRecordingObserves = function () {
        return observedInfoStack.length;
    };
    can.__notObserve = function (fn) {
        return function () {
            var previousReads = can.__clearObserved();
            var res = fn.apply(this, arguments);
            can.__setObserved(previousReads);
            return res;
        };
    };
    can.__clearObserved = can.__clearReading = function () {
        if (observedInfoStack.length) {
            var ret = observedInfoStack[observedInfoStack.length - 1];
            observedInfoStack[observedInfoStack.length - 1] = {
                names: '',
                observed: {}
            };
            return ret;
        }
    };
    can.__setObserved = can.__setReading = function (o) {
        if (observedInfoStack.length) {
            observedInfoStack[observedInfoStack.length - 1] = o;
        }
    };
    can.__addObserved = can.__addReading = function (o) {
        if (observedInfoStack.length) {
            var last = observedInfoStack[observedInfoStack.length - 1];
            can.simpleExtend(last.observed, o.observed);
            last.names += o.names;
        }
    };
    return getValueAndBind;
});